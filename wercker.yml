# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: golang
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongodb
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    - install-packages:
         packages: zip

    # Gets the dependencies
    - script:
        name: go get
        code: |
          go get

    # Build the project 
    - script:
        name: go build for rpi1
        code: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=5 go build -a -ldflags '-s' -o zwaymqtt_linux_arm5
          
    # Build the project 
    - script:
        name: go build for linux
        code: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-s' -o zwaymqtt_linux_amd64
          
    # Build the project 
    - script:
        name: go build for mac os x
        code: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -a -ldflags '-s' -o zwaymqtt_osx_amd64
          
    # Build the project 
    - script:
        name: go build for windows
        code: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -a -ldflags '-s' -o zwaymqtt_win_amd64.exe

    # Create the dist directory
    - script:
        name: create dist dir
        code: |
          mkdir -p $WERCKER_OUTPUT_DIR/dist

    # zip the generated binaries
    - script:
        name: create zip package for rpi1
        code: |
          zip -r $WERCKER_OUTPUT_DIR/dist/zwaymqtt_linux_arm5.zip zwaymqtt_linux_arm5

    # zip the generated binaries
    - script:
        name: create zip package for linux
        code: |
          zip -r $WERCKER_OUTPUT_DIR/dist/zwaymqtt_linux_amd64.zip zwaymqtt_linux_amd64
          
    # zip the generated binaries
    - script:
        name: create zip package for os x
        code: |
          zip -r $WERCKER_OUTPUT_DIR/dist/zwaymqtt_osx_amd64.zip zwaymqtt_osx_amd64

    # zip the generated binaries
    - script:
        name: create zip package for windows
        code: |
          zip -r $WERCKER_OUTPUT_DIR/dist/zwaymqtt_win_amd64.zip zwaymqtt_win_amd64.exe